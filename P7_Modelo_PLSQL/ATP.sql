SET AUTOCOMMIT on;
/**********************************************************/
/* 1.- Sentencias de borrado de todas las tablas y vistas */
/**********************************************************/
DROP TABLE PERSONA CASCADE CONSTRAINTS;
DROP TABLE JUEZ CASCADE CONSTRAINTS;
DROP TABLE SILLA CASCADE CONSTRAINTS;
DROP TABLE LINEA CASCADE CONSTRAINTS;
DROP TABLE ESPECTADOR CASCADE CONSTRAINTS;
DROP TABLE VIP CASCADE CONSTRAINTS;
DROP TABLE ADMINISTRACION CASCADE CONSTRAINTS;
DROP TABLE MARKETING CASCADE CONSTRAINTS;
DROP TABLE PROYECTO CASCADE CONSTRAINTS;
DROP TABLE CONTABILIDAD CASCADE CONSTRAINTS;
DROP TABLE DIRECTOR CASCADE CONSTRAINTS;
DROP TABLE TORNEO CASCADE CONSTRAINTS;
DROP TABLE PATROCINADOR CASCADE CONSTRAINTS;
DROP TABLE EMPRESA CASCADE CONSTRAINTS;
DROP TABLE PABELLON CASCADE CONSTRAINTS;
DROP TABLE PISTA CASCADE CONSTRAINTS;
DROP TABLE DURA CASCADE CONSTRAINTS;
DROP TABLE HIERBA CASCADE CONSTRAINTS;
DROP TABLE TIERRA CASCADE CONSTRAINTS;
DROP TABLE DEPORTISTA CASCADE CONSTRAINTS;
DROP TABLE PARTIDO CASCADE CONSTRAINTS;
DROP TABLE SVIP CASCADE CONSTRAINTS;
DROP TABLE MARKETING_PROYECTO CASCADE CONSTRAINTS;
DROP TABLE PATROCINADOR_TORNEO CASCADE CONSTRAINTS;
DROP TABLE PARTIDO_LINEA CASCADE CONSTRAINTS;
DROP TABLE ESPECTADOR_PARTIDO CASCADE CONSTRAINTS;
DROP TABLE TELEFONOS CASCADE CONSTRAINTS;

DROP VIEW DEPORTISTA_NOMBRE;
DROP VIEW PRESU_ADMIN;

/**************************************************/
/* 2.- Creamos las tablas de nuestro Diagrama EER */
/**************************************************/


CREATE TABLE PERSONA
(
  ID_PERSONA	VARCHAR2(10),
  NOMBRE		VARCHAR2(14) NOT NULL,
  APELLIDOS		VARCHAR2(23) NOT NULL,
  SEXO          VARCHAR(10) NOT NULL,
  FECHA_NAC     DATE NOT NULL,

  CONSTRAINT persona_pk PRIMARY KEY(ID_PERSONA),
  CONSTRAINT hombre_mujer
  CHECK (SEXO IN ('HOMBRE','MUJER'))

);


CREATE TABLE JUEZ
(
ID_JUEZ VARCHAR2(10),
NUM_LICENCIA VARCHAR2(10) NOT NULL,
SALAR NUMBER(6) NOT NULL,

CONSTRAINT juez_un UNIQUE(NUM_LICENCIA),
CONSTRAINT juez_pk PRIMARY KEY(ID_JUEZ),
CONSTRAINT juez_fk FOREIGN KEY(ID_JUEZ) REFERENCES PERSONA(ID_PERSONA) ON DELETE CASCADE,
CHECK (SALAR > 0)

);

CREATE TABLE TELEFONOS
(
ID_TELEFONOS VARCHAR2(10),
TELEFONO VARCHAR2(12) NOT NULL,

CONSTRAINT telefonos_un UNIQUE(TELEFONO),
CONSTRAINT telefonos_pk PRIMARY KEY (ID_TELEFONOS, TELEFONO),
CONSTRAINT telefono_fk FOREIGN KEY (ID_TELEFONOS) REFERENCES JUEZ(ID_JUEZ) ON DELETE CASCADE
);


CREATE TABLE SILLA
(
ID_JUEZ VARCHAR2(10),
NUM_OVERRULES NUMBER(4) DEFAULT 0,
NUM_ERRORES NUMBER(4) DEFAULT 0,


CONSTRAINT silla_pk PRIMARY KEY(ID_JUEZ),
CONSTRAINT silla_fk FOREIGN KEY(ID_JUEZ) REFERENCES JUEZ(ID_JUEZ) ON DELETE CASCADE

);

CREATE TABLE LINEA
(
ID_JUEZ VARCHAR2(10),
NUM_OUTSERR NUMBER(4) DEFAULT 0,
NUM_INSERR NUMBER(4) DEFAULT 0,


CONSTRAINT linea_pk PRIMARY KEY(ID_JUEZ),
CONSTRAINT liniea_fk FOREIGN KEY(ID_JUEZ) REFERENCES JUEZ(ID_JUEZ) ON DELETE CASCADE

);



CREATE TABLE ESPECTADOR
(
TIPO VARCHAR2(10) NOT NULL,
ID_ESPECTADOR VARCHAR2(10),


CONSTRAINT espectador_pk PRIMARY KEY (ID_ESPECTADOR),
CONSTRAINT espectador_fk FOREIGN KEY(ID_ESPECTADOR) REFERENCES PERSONA(ID_PERSONA) ON DELETE CASCADE

);

CREATE TABLE VIP
(
ID_VIP VARCHAR2(10),
CALIDAD_SERVICIO VARCHAR2(30),

CONSTRAINT vip_fk FOREIGN KEY(ID_VIP) REFERENCES PERSONA(ID_PERSONA) ON DELETE CASCADE

);

CREATE TABLE MARKETING
(
ID_MARKETING VARCHAR2(10),

CONSTRAINT marketing_pk PRIMARY KEY(ID_MARKETING),
CONSTRAINT marketing_fk FOREIGN KEY(ID_MARKETING) REFERENCES PERSONA(ID_PERSONA) ON DELETE CASCADE
);

CREATE TABLE PROYECTO
(
ID_PROYECTO VARCHAR2(10),
TIPO VARCHAR2(10) NOT NULL,
PRESU NUMBER(6) DEFAULT 0,

CONSTRAINT proyecto_pk PRIMARY KEY(ID_PROYECTO)
);

CREATE TABLE CONTABILIDAD
(
ID_CONTABILIDAD VARCHAR2(10),
ANHO_INICIO NUMBER(4) NOT NULL,
JEFE VARCHAR2(10),

CONSTRAINT contabilidad_pk PRIMARY KEY(ID_CONTABILIDAD),
CONSTRAINT contabilidad_fk FOREIGN KEY(ID_CONTABILIDAD) REFERENCES PERSONA(ID_PERSONA) ON DELETE CASCADE
);

ALTER TABLE CONTABILIDAD ADD FOREIGN KEY(JEFE) REFERENCES CONTABILIDAD(ID_CONTABILIDAD) ON DELETE SET NULL;

CREATE TABLE DIRECTOR
(
ID_DIRECTOR VARCHAR2(10),
OFICIO VARCHAR2(10) NOT NULL,

CONSTRAINT director_pk PRIMARY KEY (ID_DIRECTOR),
CONSTRAINT director_fk FOREIGN KEY (ID_DIRECTOR) REFERENCES PERSONA(ID_PERSONA) ON DELETE SET NULL
);

CREATE TABLE PATROCINADOR
(
ID_PATROCINADOR VARCHAR(20) NOT NULL,
IMPORTE NUMBER(10) NOT NULL,

CONSTRAINT patrocinador_pk PRIMARY KEY (ID_PATROCINADOR)
);

CREATE TABLE EMPRESA
(
CODIGO NUMBER(5),


CONSTRAINT codigo_pk PRIMARY KEY (CODIGO)
);

CREATE TABLE PABELLON
(
CODIGO NUMBER(5),
DIRECC VARCHAR2(15) NOT NULL,

CONSTRAINT pabellon_pk PRIMARY KEY (CODIGO)
);

/*EL ATRIBUTO NOMBRE DEL TORNEO LLEVARÁ EL AÑO POR EJ. 2018 ROLAND GARROS*/

CREATE TABLE TORNEO
(
NOMBRE VARCHAR2(20) NOT NULL,
CIUDAD VARCHAR2(10) NOT NULL,
FECHAFIN DATE NOT NULL,
FECHAINI DATE NOT NULL,
TIPO VARCHAR2(6) NOT NULL,
ID_DIRECTOR VARCHAR2(10) NOT NULL,
CODIGO NUMBER(5) NOT NULL,
ANHO NUMBER(4) NOT NULL,

CONSTRAINT torneo_pk PRIMARY KEY (NOMBRE, ANHO),
CONSTRAINT direc_torneo FOREIGN KEY (ID_DIRECTOR) REFERENCES DIRECTOR(ID_DIRECTOR) ON DELETE SET NULL,
CONSTRAINT torneo_pabfk FOREIGN KEY (CODIGO) REFERENCES PABELLON(CODIGO) ON DELETE SET NULL
);

CREATE TABLE ADMINISTRACION
(
ID_ADMINISTRACION VARCHAR2(10),
SALAR NUMBER(6) DEFAULT 0,
NUM_HIJOS NUMBER(2) default 0,
HORAS_TRABAJO NUMBER(4) DEFAULT 0,
COD_TORNEO VARCHAR2(20),
ANHO NUMBER (4),

CONSTRAINT administracion_pk PRIMARY KEY(ID_ADMINISTRACION),
CONSTRAINT administracion_fk FOREIGN KEY(ID_ADMINISTRACION) REFERENCES PERSONA(ID_PERSONA) ON DELETE CASCADE,
CONSTRAINT torneo_admin FOREIGN KEY(COD_TORNEO, ANHO) REFERENCES TORNEO(NOMBRE, ANHO) ON DELETE SET NULL
);

CREATE TABLE PISTA
(
NUMERO_PISTA NUMBER(6),
CODIGO NUMBER(5) NOT NULL,
AFOROMAX NUMBER(10) DEFAULT 0,
TIPO VARCHAR2(15) NOT NULL,

CONSTRAINT pista_pk PRIMARY KEY (CODIGO, NUMERO_PISTA),
CONSTRAINT pista_fk FOREIGN KEY (CODIGO) REFERENCES PABELLON(CODIGO) ON DELETE CASCADE
);

CREATE TABLE DURA
(
NUMERO_PISTA NUMBER(6),
CODIGO NUMBER(5) NOT NULL,
DUREZA NUMBER(3) NOT NULL,
MATERIAL VARCHAR2(20) NOT NULL,
COLOR VARCHAR2(6) NOT NULL,

CONSTRAINT dura_pk PRIMARY KEY (CODIGO, NUMERO_PISTA),
CONSTRAINT dura_fk FOREIGN KEY(CODIGO, NUMERO_PISTA) REFERENCES PISTA(CODIGO, NUMERO_PISTA) ON DELETE CASCADE
);

CREATE TABLE TIERRA
(
NUMERO_PISTA NUMBER(6),
CODIGO NUMBER(5) NOT NULL,
FECHA_UL_BAR DATE NOT NULL,
DENSIDAD_POLVO NUMBER(5) NOT NULL,


CONSTRAINT tierra_pk PRIMARY KEY (CODIGO, NUMERO_PISTA),
CONSTRAINT tierra_fk FOREIGN KEY(CODIGO, NUMERO_PISTA) REFERENCES PISTA(CODIGO, NUMERO_PISTA) ON DELETE CASCADE
);

CREATE TABLE HIERBA
(
NUMERO_PISTA NUMBER(6),
CODIGO NUMBER(5) NOT NULL,
ALTURA_CESPED NUMBER(3) NOT NULL,


CONSTRAINT hierba_pk PRIMARY KEY (CODIGO, NUMERO_PISTA),
CONSTRAINT hierba_fk FOREIGN KEY(CODIGO, NUMERO_PISTA) REFERENCES PISTA(CODIGO, NUMERO_PISTA) ON DELETE CASCADE
);

CREATE TABLE DEPORTISTA
(
REVES VARCHAR2(3) NOT NULL,
MANOD VARCHAR2(7) not null,
NACIONALIDAD VARCHAR2(10) NOT NULL,
PUNTOSIN NUMBER(5) DEFAULT 0,
ID_DEPORTISTA VARCHAR2(10),

CONSTRAINT deportista_pk PRIMARY KEY (ID_DEPORTISTA),
CONSTRAINT deportista_fk FOREIGN KEY (ID_DEPORTISTA) REFERENCES PERSONA(ID_PERSONA) ON DELETE CASCADE
);

CREATE TABLE PARTIDO
(
ID_JUG1 VARCHAR2(10),
ID_JUG2 VARCHAR2(10),
RESULTADO VARCHAR2(3) ,
RONDA NUMBER(6) NOT NULL,
ASISTENCIA NUMBER(3),
NOMBRE VARCHAR2(20) NOT NULL,
NUMERO_PISTA number(6),
CODIGO number(5),
ID_JUEZ varchar2(10),
FECHA_PARTIDO date,
ANHO NUMBER(4),

CONSTRAINT partido_pk PRIMARY KEY (FECHA_PARTIDO, ID_JUG1, ID_JUG2),
CONSTRAINT partido_fk FOREIGN KEY (ID_JUG1) REFERENCES DEPORTISTA(ID_DEPORTISTA) ON DELETE SET NULL,
CONSTRAINT partido1_fk FOREIGN KEY (ID_JUG2) REFERENCES DEPORTISTA(ID_DEPORTISTA) ON DELETE SET NULL,
CONSTRAINT cmpto_fk FOREIGN KEY (NOMBRE,ANHO) REFERENCES TORNEO(NOMBRE,ANHO) ON DELETE CASCADE,
CONSTRAINT pista_partido FOREIGN KEY (CODIGO, NUMERO_PISTA) REFERENCES PISTA(CODIGO, NUMERO_PISTA) ON DELETE SET NULL,
CONSTRAINT JUEZ_PARTIDO    FOREIGN KEY (ID_JUEZ) REFERENCES SILLA(ID_JUEZ) ON DELETE SET NULL

);

CREATE TABLE SVIP
(
NUM_ASISTENCIA NUMBER(1) DEFAULT 4,
CODIGO_SVIP VARCHAR2(10),

CONSTRAINT svip_pk PRIMARY KEY (CODIGO_SVIP),
CONSTRAINT svip_fk FOREIGN KEY (CODIGO_SVIP) REFERENCES ESPECTADOR(ID_ESPECTADOR) ON DELETE CASCADE,
CONSTRAINT svip1_fk FOREIGN KEY (CODIGO_SVIP) REFERENCES ADMINISTRACION(ID_ADMINISTRACION) ON DELETE CASCADE

);

CREATE TABLE MARKETING_PROYECTO
(
ID_MARKETING VARCHAR2(10),
ID_PROYECTO VARCHAR2(10),

CONSTRAINT marketing_pro_pk PRIMARY KEY (ID_PROYECTO, ID_MARKETING),
CONSTRAINT marketing_pro1 FOREIGN KEY (ID_MARKETING) REFERENCES MARKETING(ID_MARKETING) ON DELETE CASCADE,
CONSTRAINT marketing_pro2 FOREIGN KEY (ID_PROYECTO) REFERENCES PROYECTO(ID_PROYECTO) ON DELETE CASCADE

);

CREATE TABLE PATROCINADOR_TORNEO
(
ID_PATROCINADOR VARCHAR(20),
NOMBRE VARCHAR2(20),
ANHO NUMBER (4),

CONSTRAINT patrocinador_torneo_pk PRIMARY KEY (ID_PATROCINADOR, NOMBRE, ANHO),
CONSTRAINT patro_torne1 FOREIGN KEY (ID_PATROCINADOR) REFERENCES PATROCINADOR(ID_PATROCINADOR) ON DELETE CASCADE,
CONSTRAINT patro_torne2 FOREIGN KEY (NOMBRE, ANHO) REFERENCES TORNEO(NOMBRE, ANHO) ON DELETE SET NULL

);

CREATE TABLE PARTIDO_LINEA
(
ID_JUEZ VARCHAR2(10),
ID_JUG1 VARCHAR2(10),
ID_JUG2 VARCHAR2(10),
FECHA_PARTIDO date,

CONSTRAINT partido_linea_pk PRIMARY KEY (FECHA_PARTIDO, ID_JUG1, ID_JUG2, ID_JUEZ),
CONSTRAINT partido_lineafk FOREIGN KEY (ID_JUEZ) REFERENCES LINEA(ID_JUEZ) ON DELETE SET NULL,
CONSTRAINT partido_lineafk2 FOREIGN KEY (FECHA_PARTIDO, ID_JUG1, ID_JUG2) REFERENCES PARTIDO(FECHA_PARTIDO, ID_JUG1, ID_JUG2) ON DELETE CASCADE

);

CREATE TABLE ESPECTADOR_PARTIDO
(
ID_ESPECTADOR VARCHAR2(10),
ID_JUG1 VARCHAR2(10),
ID_JUG2 VARCHAR2(10),
FECHA_PARTIDO date,

CONSTRAINT espec_partidopk PRIMARY KEY (FECHA_PARTIDO, ID_JUG1, ID_JUG2, ID_ESPECTADOR),
CONSTRAINT espec_partidofk1 FOREIGN KEY (ID_ESPECTADOR) REFERENCES ESPECTADOR(ID_ESPECTADOR) ON DELETE CASCADE,
CONSTRAINT espec_partidofk2 FOREIGN KEY (FECHA_PARTIDO, ID_JUG1, ID_JUG2) REFERENCES PARTIDO(FECHA_PARTIDO, ID_JUG1, ID_JUG2) ON DELETE CASCADE

);

/*******************************************************/
/* 3.- Creamos los índices necesarios sobre las tablas */
/*******************************************************/
CREATE INDEX PATROTORNEO ON PATROCINADOR_TORNEO (NOMBRE DESC, ID_PATROCINADOR);
CREATE INDEX PARTIDO_NOMBRE ON PARTIDO (NOMBRE ASC, RONDA ASC);
CREATE INDEX JUEZ_TORN ON PARTIDO(ID_JUEZ ASC, NOMBRE ASC);

/************************************************/
/* 4.- Creamos las vistas para nuestra temática */
/************************************************/
--Vista actualizabe 1 Vista que muestra los puntos por deportista
CREATE OR REPLACE VIEW DEPORTISTA_NOMBRE(ID_DEPORTISTA, NOMBRE_DEPORTISTA, PUNTOSIN)AS
SELECT d.ID_DEPORTISTA, p.NOMBRE, d.PUNTOSIN FROM DEPORTISTA d, PERSONA p WHERE (d.ID_DEPORTISTA=p.ID_PERSONA) ORDER BY PUNTOSIN desc;

--Vista no actualizable
CREATE OR REPLACE VIEW PRESU_ADMIN (PRESUPUESTO) AS
   SELECT SUM(SALAR)
   FROM ADMINISTRACION;

/*********************************************************/
/* 5.- Insertamos datos de ejemplo para todas las tablas */
/*********************************************************/
--table PERSONA
INSERT INTO PERSONA (ID_PERSONA, NOMBRE, APELLIDOS, SEXO, FECHA_NAC) VALUES ('32456689K', 'RAFAEL', 'NADAL', 'HOMBRE','16/11/1987');
INSERT INTO PERSONA (ID_PERSONA, NOMBRE, APELLIDOS, SEXO, FECHA_NAC) VALUES ('25568899L', 'DAVID', 'FERRER', 'HOMBRE','12/10/1990');
INSERT INTO PERSONA (ID_PERSONA, NOMBRE, APELLIDOS, SEXO, FECHA_NAC) VALUES ('11112233M', 'LUIS', 'PRADO GIL', 'HOMBRE','01/01/1966');
INSERT INTO PERSONA (ID_PERSONA, NOMBRE, APELLIDOS, SEXO, FECHA_NAC) VALUES ('22334455M', 'MARISA', 'VILAÑO VILARES', 'MUJER','10/10/1990');
INSERT INTO PERSONA (ID_PERSONA, NOMBRE, APELLIDOS, SEXO, FECHA_NAC) VALUES ('89878685M', 'CARLOS', 'SANTOS PONCE', 'HOMBRE','05/12/1967');
INSERT INTO PERSONA (ID_PERSONA, NOMBRE, APELLIDOS, SEXO, FECHA_NAC) VALUES ('56525354P', 'ROGER', 'FEDERER', 'HOMBRE','02/03/1989');
INSERT INTO PERSONA (ID_PERSONA, NOMBRE, APELLIDOS, SEXO, FECHA_NAC) VALUES ('11111111P', 'SERENA', 'WILLIAMS', 'MUJER','03/04/1985');
INSERT INTO PERSONA (ID_PERSONA, NOMBRE, APELLIDOS, SEXO, FECHA_NAC) VALUES ('22889966K', 'MARIA', 'SHARAPOVA', 'MUJER','05/05/1993');
INSERT INTO PERSONA (ID_PERSONA, NOMBRE, APELLIDOS, SEXO, FECHA_NAC) VALUES ('88996644R', 'NOVAC', 'DJOCOVIK', 'HOMBRE','16/11/1987');
INSERT INTO PERSONA (ID_PERSONA, NOMBRE, APELLIDOS, SEXO, FECHA_NAC) VALUES ('56478956Y', 'CARLOS', 'CONDE PELETTEIRO', 'HOMBRE','06/08/1995');
INSERT INTO PERSONA (ID_PERSONA, NOMBRE, APELLIDOS, SEXO, FECHA_NAC) VALUES ('33333333L', 'LUIS', 'SENEN PUIG', 'HOMBRE','16/11/1987');
INSERT INTO PERSONA (ID_PERSONA, NOMBRE, APELLIDOS, SEXO, FECHA_NAC) VALUES ('22222288P', 'MARIA', 'SARTAL PONCE', 'MUJER','20/02/1995');
INSERT INTO PERSONA (ID_PERSONA, NOMBRE, APELLIDOS, SEXO, FECHA_NAC) VALUES ('44778899L', 'LUISA', 'PROL MOREIRA', 'MUJER','03/07/1992');
INSERT INTO PERSONA (ID_PERSONA, NOMBRE, APELLIDOS, SEXO, FECHA_NAC) VALUES ('1245884L', 'SENEN', 'PUIG MANSO', 'HOMBRE','09/11/1997');
INSERT INTO PERSONA (ID_PERSONA, NOMBRE, APELLIDOS, SEXO, FECHA_NAC) VALUES ('2314569M', 'OSCAR', 'PONCE LEON', 'HOMBRE','16/11/1987');
INSERT INTO PERSONA (ID_PERSONA, NOMBRE, APELLIDOS, SEXO, FECHA_NAC) VALUES ('5652456L', 'LLUIS', 'PONCE LEON', 'HOMBRE','16/11/1977');
INSERT INTO PERSONA (ID_PERSONA, NOMBRE, APELLIDOS, SEXO, FECHA_NAC) VALUES ('2345678L', 'PEPE', 'JOSE LUIS', 'HOMBRE','16/11/1987');
INSERT INTO PERSONA (ID_PERSONA, NOMBRE, APELLIDOS, SEXO, FECHA_NAC) VALUES ('1245984L', 'RAMON', 'PEREZ', 'HOMBRE','06/08/1995');
INSERT INTO PERSONA (ID_PERSONA, NOMBRE, APELLIDOS, SEXO, FECHA_NAC) VALUES ('Y4443344P', 'MARICARMEN', 'COBIAN LEREZ', 'MUJER','16/11/1987');
INSERT INTO PERSONA (ID_PERSONA, NOMBRE, APELLIDOS, SEXO, FECHA_NAC) VALUES ('344383P', 'MARISA', 'PUIG', 'MUJER','20/02/1995');
INSERT INTO PERSONA (ID_PERSONA, NOMBRE, APELLIDOS, SEXO, FECHA_NAC) VALUES ('YLKKA09', 'JOSE', 'DEL PRESTAMO', 'HOMBRE','03/07/1992');
INSERT INTO PERSONA (ID_PERSONA, NOMBRE, APELLIDOS, SEXO, FECHA_NAC) VALUES ('0238978P', 'LORENZO', 'GARCIA PONTE', 'HOMBRE','09/11/1997');
INSERT INTO PERSONA (ID_PERSONA, NOMBRE, APELLIDOS, SEXO, FECHA_NAC) VALUES ('2463986M', 'MIGUEL', 'VILLANUEVA', 'HOMBRE','16/11/1987');
INSERT INTO PERSONA (ID_PERSONA, NOMBRE, APELLIDOS, SEXO, FECHA_NAC) VALUES ('789456123M', 'BORJA', 'CARRO HERNANDEZ', 'HOMBRE','16/11/1977');

--table JUEZ
INSERT INTO JUEZ(ID_JUEZ, NUM_LICENCIA, SALAR) VALUES ('11112233M', 111125, 2300);
INSERT INTO JUEZ(ID_JUEZ, NUM_LICENCIA, SALAR) VALUES ('22334455M', 111145, 2300);
INSERT INTO JUEZ(ID_JUEZ, NUM_LICENCIA, SALAR) VALUES ('2314569M', 111156, 1300);

--tabla SILLA
INSERT INTO SILLA(ID_JUEZ, NUM_OVERRULES, NUM_ERRORES) VALUES ('11112233M',0 ,4);

--tabla LINEA
INSERT INTO LINEA(ID_JUEZ, NUM_OUTSERR, NUM_INSERR) VALUES ('22334455M', 0, 1);
INSERT INTO LINEA(ID_JUEZ, NUM_OUTSERR, NUM_INSERR) VALUES ('2314569M', 4, 3);

--table ESPECTADOR
INSERT INTO ESPECTADOR(TIPO, ID_ESPECTADOR) VALUES ('sesion','YLKKA09');
INSERT INTO ESPECTADOR(TIPO, ID_ESPECTADOR) VALUES ('abonado','0238978P');
INSERT INTO ESPECTADOR(TIPO, ID_ESPECTADOR) VALUES ('abonado','2463986M');
INSERT INTO ESPECTADOR(TIPO, ID_ESPECTADOR) VALUES ('abonado','789456123M');

--table VIP
INSERT INTO VIP(ID_VIP, CALIDAD_SERVICIO) VALUES ('YLKKA09','BUENO, PERO MEJORABLE');
INSERT INTO VIP(ID_VIP, CALIDAD_SERVICIO) VALUES ('2463986M','ESPECTACULAR, BUENA ATENCIÓN');

--table MARKETING
INSERT INTO MARKETING(ID_MARKETING) VALUES ('33333333L');
INSERT INTO MARKETING(ID_MARKETING) VALUES ('22222288P');

--table PROYECTO
INSERT INTO PROYECTO(ID_PROYECTO,TIPO,PRESU) VALUES ('33333333L','PUBLICIDAD',20000 );
INSERT INTO PROYECTO(ID_PROYECTO,TIPO,PRESU) VALUES ('22222288P','SOCIAL',5000 );

--table CONTABILIDAD
INSERT INTO CONTABILIDAD(ID_CONTABILIDAD,ANHO_INICIO,JEFE) VALUES ('789456123M', 2010, '');
INSERT INTO CONTABILIDAD(ID_CONTABILIDAD,ANHO_INICIO,JEFE) VALUES ('1245884L', 2016, '789456123M');
INSERT INTO CONTABILIDAD(ID_CONTABILIDAD,ANHO_INICIO,JEFE) VALUES ('11112233M', 2019, '789456123M');

--table DIRECTOR
INSERT INTO DIRECTOR(ID_DIRECTOR, OFICIO) VALUES ('89878685M', 'ABOGADO');

--table PATROCINADOR
INSERT INTO PATROCINADOR(ID_PATROCINADOR,IMPORTE) VALUES ('1245884L', 20000);
INSERT INTO PATROCINADOR(ID_PATROCINADOR, IMPORTE) VALUES ('22222288P', 30000);

--table EMPRESA
INSERT INTO EMPRESA(CODIGO) VALUES ('23');

--table PABELLON
INSERT INTO PABELLON(CODIGO, DIRECC) VALUES (023, 'RUA PEDRAS');
INSERT INTO PABELLON(CODIGO, DIRECC) VALUES (045, 'RUA DE VIGO');

--table TORNEO
INSERT INTO TORNEO(NOMBRE, CIUDAD,FECHAFIN,FECHAINI,TIPO,ID_DIRECTOR,CODIGO,ANHO) VALUES ('ROLAND GARROS', 'PARIS', '16/11/2019', '23/11/2019', 'GRANS', '89878685M','045','2019');
INSERT INTO TORNEO(NOMBRE, CIUDAD,FECHAFIN,FECHAINI,TIPO,ID_DIRECTOR,CODIGO,ANHO) VALUES ('OPEN OURENSE', 'OURENSE', '01/11/2020', '23/11/2020', 'GRANS', '89878685M','023','2019');

--table ADMINISTRACION
INSERT INTO ADMINISTRACION(ID_ADMINISTRACION,SALAR,NUM_HIJOS,HORAS_TRABAJO,COD_TORNEO,ANHO) VALUES ('0238978P', 1200, 2, 57, 'OPEN OURENSE','2019');
INSERT INTO ADMINISTRACION(ID_ADMINISTRACION,SALAR,NUM_HIJOS,HORAS_TRABAJO,COD_TORNEO,ANHO) VALUES ('44778899L', 1600, 0, 157, 'ROLAND GARROS','2019');

--table PISTA
INSERT INTO PISTA(NUMERO_PISTA, CODIGO, AFOROMAX, TIPO) VALUES(1, 023, 230, 'CUBIERTA');
INSERT INTO PISTA(NUMERO_PISTA, CODIGO, AFOROMAX, TIPO) VALUES(2, 023, 230, 'CUBIERTA');
INSERT INTO PISTA(NUMERO_PISTA, CODIGO, AFOROMAX, TIPO) VALUES(3, 023, 230, 'CUBIERTA');
INSERT INTO PISTA(NUMERO_PISTA, CODIGO, AFOROMAX, TIPO) VALUES(4, 023, 230, 'CUBIERTA');
INSERT INTO PISTA(NUMERO_PISTA, CODIGO, AFOROMAX, TIPO) VALUES(1, 045, 230, 'CUBIERTA');
INSERT INTO PISTA(NUMERO_PISTA, CODIGO, AFOROMAX, TIPO) VALUES(2, 045, 230, 'CUBIERTA');
INSERT INTO PISTA(NUMERO_PISTA, CODIGO, AFOROMAX, TIPO) VALUES(3, 045, 230, 'CUBIERTA');
INSERT INTO PISTA(NUMERO_PISTA, CODIGO, AFOROMAX, TIPO) VALUES(4, 045, 230, 'CUBIERTA');

--table DURA
INSERT INTO DURA(NUMERO_PISTA, CODIGO,DUREZA,MATERIAL,COLOR) VALUES (1, 023, 3, 'MOQUETA', 'AZUL');
INSERT INTO DURA(NUMERO_PISTA, CODIGO,DUREZA,MATERIAL,COLOR) VALUES (2, 023, 3, 'MOQUETA', 'AZUL');
INSERT INTO DURA(NUMERO_PISTA, CODIGO,DUREZA,MATERIAL,COLOR) VALUES (1, 045, 2, 'CEMENTO', 'VERDE');
INSERT INTO DURA(NUMERO_PISTA, CODIGO,DUREZA,MATERIAL,COLOR) VALUES (2, 045, 1, 'MOQUETA', 'VERDE');

--table TIERRA
INSERT INTO TIERRA(NUMERO_PISTA, CODIGO,FECHA_UL_BAR,DENSIDAD_POLVO) VALUES (3, 023, '10/10/2019', 2);
INSERT INTO TIERRA(NUMERO_PISTA, CODIGO,FECHA_UL_BAR,DENSIDAD_POLVO) VALUES (3, 045, '01/11/2019', 1);

--table HIERBA
INSERT INTO HIERBA(NUMERO_PISTA, CODIGO,ALTURA_CESPED) VALUES (4, 023, 4);
INSERT INTO HIERBA(NUMERO_PISTA, CODIGO,ALTURA_CESPED) VALUES (4, 045, 2);

--table DEPORTISTA
INSERT INTO DEPORTISTA(REVES,MANOD,NACIONALIDAD,PUNTOSIN,ID_DEPORTISTA) VALUES ('DOS','ZURDA','ESPAÑOLA','47','32456689K');
INSERT INTO DEPORTISTA(REVES,MANOD,NACIONALIDAD,PUNTOSIN,ID_DEPORTISTA) VALUES ('UNA','DIESTRA','CHECO','120','25568899L');
INSERT INTO DEPORTISTA(REVES,MANOD,NACIONALIDAD,PUNTOSIN,ID_DEPORTISTA) VALUES ('UNA','DIESTRA','RUSO','89','56525354P');
INSERT INTO DEPORTISTA(REVES,MANOD,NACIONALIDAD,PUNTOSIN,ID_DEPORTISTA) VALUES ('DOS','ZURDA','EEUU','203','11111111P');
INSERT INTO DEPORTISTA(REVES,MANOD,NACIONALIDAD,PUNTOSIN,ID_DEPORTISTA) VALUES ('DOS','DIESTRA','BULGARIA','56','22889966K');
INSERT INTO DEPORTISTA(REVES,MANOD,NACIONALIDAD,PUNTOSIN,ID_DEPORTISTA) VALUES ('DOS','ZURDA','ESPAÑOLA','52','88996644R');

--table PARTIDO
INSERT INTO PARTIDO(ID_JUG1,ID_JUG2,RESULTADO,RONDA,ASISTENCIA,NOMBRE,NUMERO_PISTA,CODIGO,ID_JUEZ,FECHA_PARTIDO,ANHO) VALUES ('32456689K','25568899L', '2-1', 1, 2, 'OPEN OURENSE', 1, 023, '11112233M','10/10/2019','2019');
INSERT INTO PARTIDO(ID_JUG1,ID_JUG2,RESULTADO,RONDA,ASISTENCIA,NOMBRE,NUMERO_PISTA,CODIGO,ID_JUEZ,FECHA_PARTIDO,ANHO) VALUES ('56525354P','11111111P', '1-2', 1, 0, 'OPEN OURENSE', 2, 023, '11112233M','10/10/2019','2019');
INSERT INTO PARTIDO(ID_JUG1,ID_JUG2,RESULTADO,RONDA,ASISTENCIA,NOMBRE,NUMERO_PISTA,CODIGO,ID_JUEZ,FECHA_PARTIDO,ANHO) VALUES ('22889966K','88996644R', '1-2', 8, 1, 'ROLAND GARROS', 3, 045, '11112233M','11/11/2018','2019');

--table SVIP
INSERT INTO SVIP(NUM_ASISTENCIA,CODIGO_SVIP) VALUES (2, '0238978P');

--table MARKETING_PROYECTO
INSERT INTO MARKETING_PROYECTO(ID_MARKETING,ID_PROYECTO) VALUES ('33333333L','33333333L');
INSERT INTO MARKETING_PROYECTO(ID_MARKETING,ID_PROYECTO) VALUES ('22222288P','22222288P');

--table PATROCINADOR_TORNEO
INSERT INTO PATROCINADOR_TORNEO(ID_PATROCINADOR,NOMBRE,ANHO) VALUES ('1245884L','OPEN OURENSE','2019');
INSERT INTO PATROCINADOR_TORNEO(ID_PATROCINADOR,NOMBRE,ANHO) VALUES ('22222288P','OPEN OURENSE','2019');
INSERT INTO PATROCINADOR_TORNEO(ID_PATROCINADOR,NOMBRE,ANHO) VALUES ('22222288P','ROLAND GARROS','2019');

--TABLE PARTIDO-LINEA
INSERT INTO PARTIDO_LINEA(ID_JUEZ,ID_JUG1,ID_JUG2,FECHA_PARTIDO) VALUES ('22334455M','32456689K','25568899L', '10/10/2019');
INSERT INTO PARTIDO_LINEA(ID_JUEZ,ID_JUG1,ID_JUG2,FECHA_PARTIDO) VALUES ('22334455M','56525354P','11111111P', '10/10/2019');
INSERT INTO PARTIDO_LINEA(ID_JUEZ,ID_JUG1,ID_JUG2,FECHA_PARTIDO) VALUES ('2314569M','22889966K','88996644R', '11/11/2018');

--table ESPECTADOR-PARTIDO
INSERT INTO ESPECTADOR_PARTIDO(ID_ESPECTADOR,ID_JUG1,ID_JUG2,FECHA_PARTIDO) VALUES ('YLKKA09','32456689K','25568899L', '10/10/2019');
INSERT INTO ESPECTADOR_PARTIDO(ID_ESPECTADOR,ID_JUG1,ID_JUG2,FECHA_PARTIDO) VALUES ('0238978P','32456689K','25568899L', '10/10/2019');

--table TELEFONOS
INSERT INTO TELEFONOS(ID_TELEFONOS, TELEFONO) VALUES ('11112233M','+35123456789');
INSERT INTO TELEFONOS(ID_TELEFONOS, TELEFONO) VALUES ('22334455M','23568974');
INSERT INTO TELEFONOS(ID_TELEFONOS, TELEFONO) VALUES ('2314569M','+1223548978');

/********************************************/
/* 6.- Incluímos sentencias de comprobación */
/********************************************/
--Comprobación de las personas que tenemos en marketing junto a sus datos personales
SELECT P.NOMBRE, P.APELLIDOS, P.FECHA_NAC FROM PERSONA P, MARKETING M WHERE P.ID_PERSONA = M.ID_MARKETING;

--Los jueces junto a sus datos personales y teléfonos
SELECT P.NOMBRE, P.APELLIDOS, P.FECHA_NAC, J.SALAR, T.TELEFONO FROM PERSONA P, JUEZ J, TELEFONOS T WHERE P.ID_PERSONA = J.ID_JUEZ AND J.ID_JUEZ = T.ID_TELEFONOS;

--Los espectadores junto a sus datos personales
SELECT P.NOMBRE, P.APELLIDOS, P.FECHA_NAC, E.TIPO FROM PERSONA P, ESPECTADOR E WHERE P.ID_PERSONA = E.ID_ESPECTADOR;

--Espectadores que son VIP
SELECT P.NOMBRE, P.APELLIDOS, P.FECHA_NAC, V.CALIDAD_SERVICIO FROM PERSONA P, VIP V WHERE P.ID_PERSONA = V.ID_VIP;

--Deportistas
SELECT P.NOMBRE, P.APELLIDOS, P.FECHA_NAC, D.NACIONALIDAD FROM PERSONA P, DEPORTISTA D WHERE P.ID_PERSONA = D.ID_DEPORTISTA;

--Sentencia de comprobacion  vista Deportista_Nombre
SELECT * FROM DEPORTISTA_NOMBRE;

INSERT INTO DEPORTISTA(REVES,MANOD,NACIONALIDAD,PUNTOSIN,ID_DEPORTISTA) VALUES ('DOS','ZURDA','ESPAÑOLA','82','56478956Y');

SELECT * FROM DEPORTISTA_NOMBRE;

--Sentencia de comprobacion vista PRESU_ADMIN
SELECT * FROM PRESU_ADMIN;

INSERT INTO ADMINISTRACION(ID_ADMINISTRACION,SALAR,NUM_HIJOS,HORAS_TRABAJO,COD_TORNEO,ANHO) VALUES ('33333333L', 2000, 0, 157, 'ROLAND GARROS','2019');

SELECT * FROM PRESU_ADMIN;

/*****************************************/
/* 7.- Procedimientos y Funciones PL/SQL */
/*****************************************/
--Procedimiento NOMBRE_DEPORTISTA_NACION
CREATE OR REPLACE
PROCEDURE NombreTenistasNacion(nacionin IN VARCHAR2, numdeponacion OUT NUMBER)
IS

    regPer PERSONA%ROWTYPE;
    regDep DEPORTISTA%ROWTYPE;
    E_MI_EXCEPCION EXCEPTION;

    CURSOR C_DEPORTISTA IS
        SELECT ID_PERSONA, NOMBRE, APELLIDOS, SEXO, FECHA_NAC
        FROM DEPORTISTA D, PERSONA P
        WHERE NACIONALIDAD=nacionin AND ID_DEPORTISTA=ID_PERSONA
        ORDER BY PUNTOSIN DESC;

    CURSOR D_DEPORTISTA IS
        SELECT REVES, MANOD, NACIONALIDAD, PUNTOSIN, ID_DEPORTISTA
        FROM DEPORTISTA D, PERSONA P
        WHERE NACIONALIDAD=nacionin AND D.ID_DEPORTISTA=ID_PERSONA
        ORDER BY PUNTOSIN DESC;

        BEGIN
            OPEN C_DEPORTISTA;
            OPEN D_DEPORTISTA;
            DBMS_OUTPUT.PUT_LINE('Deportistas de nacionalidad: "' || nacionin || '"');
            LOOP
                FETCH C_DEPORTISTA INTO regPer;
                EXIT WHEN C_DEPORTISTA%NOTFOUND;
                FETCH D_DEPORTISTA INTO regDep;
                DBMS_OUTPUT.PUT(regPer.NOMBRE || ' ' || regDep.puntosin);
                DBMS_OUTPUT.PUT_LINE('');
            END LOOP;

            numdeponacion := C_DEPORTISTA%ROWCOUNT;
            IF(numDeponacion = 0) THEN
                RAISE E_MI_EXCEPCION;
            END IF;

            CLOSE C_DEPORTISTA;
            CLOSE D_DEPORTISTA;

            EXCEPTION
                WHEN E_MI_EXCEPCION  THEN
                    DBMS_OUTPUT.PUT_LINE('No hay deportistas para la nacionalidad introducida');
                WHEN OTHERS THEN
                    DBMS_OUTPUT.PUT_LINE('Código: ' || SQLCODE || SUBSTR(SQLERRM, 11, 100));
            END NombreTenistasNacion;
            /
            show errors;

--Procedimiento DEPORTISTAS_NACION
CREATE OR REPLACE
PROCEDURE masPuntos(idDep IN VARCHAR2, puntos IN NUMBER)
IS
    aux NUMBER;
    regDep DEPORTISTA%ROWTYPE;
    E_MI_EXCEPCION EXCEPTION;

    CURSOR C_DEPORTISTA IS
        SELECT REVES, MANOD, NACIONALIDAD, PUNTOSIN, ID_DEPORTISTA
        FROM DEPORTISTA
        WHERE id_deportista=idDep
         FOR UPDATE;

        BEGIN
            DBMS_OUTPUT.PUT_LINE('Deportista: ' || idDep || ' recibe '|| puntos||' puntos');
            FOR regDep IN C_DEPORTISTA LOOP
            aux := aux + 1;
            UPDATE DEPORTISTA SET puntosIn = puntosIn + puntos
            WHERE CURRENT OF C_DEPORTISTA;
            END LOOP;
            IF(aux = 0) THEN
                RAISE E_MI_EXCEPCION;
            END IF;

            EXCEPTION
                WHEN E_MI_EXCEPCION  THEN
                    DBMS_OUTPUT.PUT_LINE('La id introducida no existe');
                WHEN OTHERS THEN
                    DBMS_OUTPUT.PUT_LINE('Código: ' || SQLCODE || SUBSTR(SQLERRM, 11, 100));
            END masPuntos;
            /
            show errors;
--Procedimiento puntosNacion
CREATE OR REPLACE
PROCEDURE puntosNacion(nacionin IN VARCHAR2, puntos IN NUMBER)
IS

    aux NUMBER := 0;
    regDep DEPORTISTA%ROWTYPE;
    E_MI_EXCEPCION EXCEPTION;

    CURSOR C_DEPORTISTA IS
        SELECT REVES, MANOD, NACIONALIDAD, PUNTOSIN, ID_DEPORTISTA
        FROM DEPORTISTA
        WHERE NACIONALIDAD=nacionin
        FOR UPDATE;

        BEGIN
            DBMS_OUTPUT.PUT_LINE('Deportistas de nacionalidad: "' || nacionin || '" reciben ' || puntos || ' puntos');
            FOR regDep IN C_DEPORTISTA LOOP
            aux := aux + 1;
            UPDATE DEPORTISTA SET puntosIn = puntosIn + puntos
            WHERE CURRENT OF C_DEPORTISTA;
            END LOOP;
            IF(aux = 0) THEN
                RAISE E_MI_EXCEPCION;
            END IF;

            EXCEPTION
                WHEN E_MI_EXCEPCION  THEN
                    DBMS_OUTPUT.PUT_LINE('No hay deportistas para la nacionalidad introducida');
                WHEN OTHERS THEN
                    DBMS_OUTPUT.PUT_LINE('Código: ' || SQLCODE || SUBSTR(SQLERRM, 11, 100));
            END puntosNacion;
            /
            show errors;

--Procedimiento controlAsistencia
CREATE OR REPLACE
PROCEDURE controlAsistencia(codigo IN VARCHAR2, balance IN NUMBER)
IS

   aux NUMBER;
    regSvip SVIP%ROWTYPE;
    E_MI_EXCEPCION EXCEPTION;

    CURSOR C_SVIP IS
        SELECT num_asistencia, codigo_svip
        FROM SVIP
        WHERE codigo_svip=codigo
         FOR UPDATE;

        BEGIN
            DBMS_OUTPUT.PUT_LINE('Empleado: ' || codigo || ' recibe '|| balance ||' numeros de asistencia');
            FOR regSvip IN C_SVIP LOOP
            DBMS_OUTPUT.PUT_LINE(regSvip.codigo_svip||' contaba con '||regSvip.num_asistencia);
            aux := aux + 1;
            UPDATE SVIP SET num_asistencia = num_asistencia + (balance)
            WHERE CURRENT OF C_SVIP;
            END LOOP;

            OPEN C_SVIP;
            FETCH C_SVIP INTO regSvip;
            DBMS_OUTPUT.PUT_LINE(regSvip.codigo_svip||' ahora tiene '||regSvip.num_asistencia);
            CLOSE C_SVIP;

            IF(aux = 0) THEN
                RAISE E_MI_EXCEPCION;
            END IF;

            EXCEPTION
                WHEN E_MI_EXCEPCION  THEN
                    DBMS_OUTPUT.PUT_LINE('La id introducida no existe');
                WHEN OTHERS THEN
                    DBMS_OUTPUT.PUT_LINE('Código: ' || SQLCODE || SUBSTR(SQLERRM, 11, 100));
            END controlAsistencia;
            /
            show errors;

-- FUNCION:SumaSalariosHijos
CREATE OR REPLACE
FUNCTION SumaSalariosHijos(hijos IN NUMBER)
RETURN NUMBER
IS
   sumaSalarios NUMBER;
BEGIN
   SELECT SUM(SALAR) INTO sumaSalarios
      FROM ADMINISTRACION
      WHERE num_Hijos>=hijos;
   RETURN sumaSalarios;
END SumaSalariosHijos;
/
show errors

CREATE OR REPLACE
PROCEDURE separador(contador IN NUMBER,caracter IN CHAR)
IS
    aux NUMBER;
        BEGIN
            aux := contador;
            DBMS_OUTPUT.NEW_LINE;
            WHILE aux > 0 LOOP
                DBMS_OUTPUT.PUT(caracter);
                aux := aux- 1;
            END LOOP;
            DBMS_OUTPUT.NEW_LINE;
            DBMS_OUTPUT.NEW_LINE;
            DBMS_OUTPUT.NEW_LINE;
        END separador;
            /
            show errors;

/********************************************************/
/* 9.- Bloque para prueba de Procedimientos y Funciones */
/********************************************************/
SET SERVEROUTPUT ON
DECLARE
    toret NUMBER;
    toret2 varchar2(10);
    contador NUMBER:=100;

BEGIN
    DBMS_OUTPUT.NEW_LINE;

    BEGIN
--Procedimiento
    separador(contador,'-');
    DBMS_OUTPUT.PUT_LINE('INICIO DE PROCEDIMIENTO: NombreTenistasNacion');
    NombreTenistasNacion('ESPAÑOLA', toret);
    DBMS_OUTPUT.PUT_LINE('Tenemos a ' || toret || ' deportistas');
    DBMS_OUTPUT.NEW_LINE;
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('[EXCEPCIÓN]');
    END;
    BEGIN
--Procedimiento
    separador(contador,'@');
    DBMS_OUTPUT.PUT_LINE('INICIO DE PROCEDIMIENTO: masPuntos');
    toret := 150;
    toret2 := '32456689K';
    masPuntos(toret2, toret);
    DBMS_OUTPUT.PUT_LINE('Se han otorgado ' || toret || ' puntos a ' || toret2);
    DBMS_OUTPUT.NEW_LINE;
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('[EXCEPCIÓN]');
    END;
    BEGIN
--Procedimiento
    separador(contador,'-');
    DBMS_OUTPUT.PUT_LINE('INICIO DE PROCEDIMIENTO: NombreTenistasNacion');
    NombreTenistasNacion('ESPAÑOLA', toret);
    DBMS_OUTPUT.PUT_LINE('Tenemos a ' || toret || ' deportistas');
    DBMS_OUTPUT.NEW_LINE;
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('[EXCEPCIÓN]');
    END;
    BEGIN
--Procedimiento
    separador(contador,'-');
    DBMS_OUTPUT.PUT_LINE('INICIO DE PROCEDIMIENTO: puntosNacion');
    toret := 50;
    toret2 := 'ESPAÑOLA';
    puntosNacion(toret2, toret);
    DBMS_OUTPUT.PUT_LINE('Se han otorgado ' || toret || ' puntos a los jugadores de la selección ' || toret2);
    DBMS_OUTPUT.NEW_LINE;
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('[EXCEPCIÓN]');
    END;
    BEGIN
--Procedimiento
    separador(contador,'-');
    DBMS_OUTPUT.PUT_LINE('INICIO DE PROCEDIMIENTO: NombreTenistasNacion');
    NombreTenistasNacion('ESPAÑOLA', toret);
    DBMS_OUTPUT.PUT_LINE('Tenemos a ' || toret || ' deportistas');
    DBMS_OUTPUT.NEW_LINE;
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('[EXCEPCIÓN]');
    END;
    BEGIN
--Procedimiento
    separador(contador,'-');
    DBMS_OUTPUT.PUT_LINE('INICIO DE PROCEDIMIENTO: control asistencia');
    toret := -1;
    toret2 := '0238978P';
    controlAsistencia(toret2, toret);
    DBMS_OUTPUT.PUT_LINE('Se ha modificado en ' || toret || ' al numero de asistencia del empleado con codigo ' || toret2);
    DBMS_OUTPUT.NEW_LINE;
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('[EXCEPCIÓN]');
    END;
       BEGIN
-- Funcion
      separador(contador,'-');
      DBMS_OUTPUT.PUT_LINE('INICIO FUNCIÓN: SumaSalariosHijos');
      toRet := SumaSalariosHijos(2);
      DBMS_OUTPUT.PUT_LINE('Suma de Salarios : ' || toRet || ' para personas con 2 o más hijos');
      DBMS_OUTPUT.PUT_LINE('FIN FUNCIÓN');
      DBMS_OUTPUT.NEW_LINE;
   EXCEPTION
      WHEN OTHERS THEN
         DBMS_OUTPUT.PUT_LINE('[EXCEPCIÓN]');
         DBMS_OUTPUT.PUT_LINE('[Código]: ' || SQLCODE);
         DBMS_OUTPUT.PUT_LINE('[Mensaje]: ' || SUBSTR(SQLERRM, 11, 100));
   END;
END;
